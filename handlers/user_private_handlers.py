from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

import os
from pathlib import Path
import logging
from aiogram import types, Router, F
from aiogram.filters import CommandStart, Command, or_f
from aiogram.fsm.context import FSMContext
from aiogram.types import ContentType
from aiogram.fsm.state import StatesGroup, State
from aiogram.exceptions import TelegramForbiddenError
import other.reply as reply
from other.config import bot
from book.app_book import summarize_book
from qoute.app_qoute import extract_quotes
from other.functions import get_books_list, save_to_pdf
from settings import UPLOAD_DIR
from recommendations.app_recommendations import extract_recommendations 
from aiogram.types.input_file import FSInputFile

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


user_private_router = Router()

class BookStates(StatesGroup):
    WAITING_FOR_DELETION = State()
    WAITING_FOR_SUMMARIZE = State()
    WAITING_FOR_QUOTES = State()
    WAITING_FOR_RECOMMENDATION = State()
    WAITING_FOR_COMPANY_NAME = State()  
    WAITING_FOR_COMPANY_DESCRIPTION = State()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@user_private_router.message(CommandStart())
async def cmd_start(message: types.Message):
    greeting = (
        "–ü—Ä–∏–≤–µ—Ç!üëã –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ü§ñ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–Ω–∏–≥ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Ç–∫–∏—Ö —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–π.\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "1Ô∏è‚É£ - –ó–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–∏–≥–∏\n"
        "2Ô∏è‚É£ - –£–¥–∞–ª–µ–Ω–∏–µ –∫–Ω–∏–≥–∏\n"
        "3Ô∏è‚É£ - –ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏\n"
        "4Ô∏è‚É£ - –ü–æ–∏—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ü–∏—Ç–∞—Ç\n"
        "5Ô∏è‚É£ - –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "6Ô∏è‚É£ - –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "7Ô∏è‚É£ - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
        "8Ô∏è‚É£ - –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã\n"
    )
    try:
        await message.answer(greeting, reply_markup=reply.start_kb)
    except TelegramForbiddenError:
        logger.warning(f"Bot was blocked by the user: {message.from_user.id}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /download
@user_private_router.message(or_f(Command("download"), (F.text.lower() == '–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–Ω–∏–≥—É')))
async def cmd_download(message: types.Message):
    try:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–Ω–∏–≥—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –≠—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ .pdf.")
    except TelegramForbiddenError:
        logger.warning(f"Bot was blocked by the user: {message.from_user.id}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
@user_private_router.message(F.content_type == ContentType.DOCUMENT)
async def handle_document(message: types.Message):
    if message.document.mime_type not in ["application/pdf"]:
        try:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ .pdf.")
        except TelegramForbiddenError:
            logger.warning(f"Bot was blocked by the user: {message.from_user.id}")
        return

    file_info = await bot.get_file(message.document.file_id)
    file_path = file_info.file_path
    file = await bot.download_file(file_path)
    destination = UPLOAD_DIR / message.document.file_name
    with open(destination, 'wb') as f:
        f.write(file.read())

    try:
        await message.reply(f"–°–ø–∞—Å–∏–±–æ! –ö–Ω–∏–≥–∞ '{message.document.file_name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n"
                            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –∏–ª–∏ –ø–æ–∏—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ü–∏—Ç–∞—Ç.\n")
    except TelegramForbiddenError:
        logger.warning(f"Bot was blocked by the user: {message.from_user.id}")

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /delete
@user_private_router.message(or_f(Command("delete"), (F.text.lower() == '—É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É')))
async def cmd_delete(message: types.Message, state: FSMContext):
    books = get_books_list()
    if not books:
        try:
            await message.answer("–í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        except TelegramForbiddenError:
            logger.warning(f"Bot was blocked by the user: {message.from_user.id}")
        return

    text = "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n"
    for i, book in enumerate(books, start=1):
        text += f"{i}. {book}\n"

    await state.set_state(BookStates.WAITING_FOR_DELETION)
    try:
        await message.answer(text)
    except TelegramForbiddenError:
        logger.warning(f"Bot was blocked by the user: {message.from_user.id}")

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–Ω–∏–≥–∏
@user_private_router.message(F.text.regexp(r'^\d+$'))
async def handle_book_selection(message: types.Message, state: FSMContext):
    books = get_books_list()
    try:
        book_index = int(message.text) - 1
        if 0 <= book_index < len(books):
            selected_book = books[book_index]
            current_state = await state.get_state()

            if current_state == BookStates.WAITING_FOR_DELETION.state:
                os.remove(UPLOAD_DIR / selected_book)
                try:
                    await message.reply(f"–ö–Ω–∏–≥–∞ '{selected_book}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
                except TelegramForbiddenError:
                    logger.warning(f"Bot –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {message.from_user.id}")
                await state.clear()

            elif current_state in [BookStates.WAITING_FOR_SUMMARIZE.state,
                                   BookStates.WAITING_FOR_QUOTES.state,
                                   BookStates.WAITING_FOR_RECOMMENDATION.state]:
                await state.update_data(selected_book=selected_book)
                if current_state == BookStates.WAITING_FOR_RECOMMENDATION.state:
                    await ask_company_name(message, state)
                else:
                    try:
                        await message.reply(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–Ω–∏–≥—É '{selected_book}'.")
                    except TelegramForbiddenError:
                        logger.warning(f"Bot –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {message.from_user.id}")
                    await handle_amount(message, state)

        else:
            try:
                await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä.")
            except TelegramForbiddenError:
                logger.warning(f"Bot –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {message.from_user.id}")
    except ValueError:
        try:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏.")
        except TelegramForbiddenError:
            logger.warning(f"Bot –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {message.from_user.id}")


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /summarize
@user_private_router.message(or_f(Command("summarize"), (F.text.lower() == '–ø—Ä–æ–≤–µ—Å—Ç–∏ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é')))
async def cmd_summarize(message: types.Message, state: FSMContext):
    books = get_books_list()
    if not books:
        try:
            await message.answer("–í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏.")
        except TelegramForbiddenError:
            logger.warning(f"Bot was blocked by the user: {message.from_user.id}")
        return

    text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏ –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏:\n"
    for i, book in enumerate(books, start=1):
        text += f"{i}. {book}\n"

    await state.set_state(BookStates.WAITING_FOR_SUMMARIZE)
    try:
        await message.answer(text)
    except TelegramForbiddenError:
        logger.warning(f"Bot was blocked by the user: {message.from_user.id}")


async def handle_amount(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    selected_book = user_data.get('selected_book')
    company_name = user_data.get('company_name')
    company_description = user_data.get('company_description')

    logger.info(f"UPLOAD_DIR: {UPLOAD_DIR}")
    logger.info(f"selected_book: {selected_book}")

    if not selected_book:
        try:
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–Ω–∏–≥–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except TelegramForbiddenError:
            logger.warning(f"Bot –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {message.from_user.id}")
        await state.clear()
        return

    openai_api_key = os.getenv("openai_api_key")
    if not openai_api_key:
        try:
            await message.reply("API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except TelegramForbiddenError:
            logger.warning(f"Bot –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {message.from_user.id}")
        await state.clear()
        return

    try:
        current_state = await state.get_state()
        full_file_path = UPLOAD_DIR / selected_book  # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
        print(f"Current state: {current_state}")  # –í—Ä–µ–º–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

        if current_state == BookStates.WAITING_FOR_SUMMARIZE.state:
            try:
                await message.reply("–ù–∞—á–∏–Ω–∞–µ–º —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—é –∫–Ω–∏–≥–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            except TelegramForbiddenError:
                logger.warning(f"Bot –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {message.from_user.id}")
            summary = summarize_book(full_file_path, openai_api_key)
            base_name = UPLOAD_DIR / Path(selected_book).stem
            save_path = base_name.with_suffix('.summary.pdf')
            save_to_pdf(summary, save_path)
            try:
                await message.reply(f"–§–∞–π–ª \"{save_path.name}\" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
                document = FSInputFile(save_path)
                await bot.send_document(message.chat.id, document)
            except TelegramForbiddenError:
                logger.warning(f"Bot –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {message.from_user.id}")

        elif current_state == BookStates.WAITING_FOR_QUOTES.state:
            try:
                await message.reply("–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Ü–∏—Ç–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            except TelegramForbiddenError:
                logger.warning(f"Bot –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {message.from_user.id}")
            quotes = extract_quotes(full_file_path, openai_api_key)
            base_name = UPLOAD_DIR / Path(selected_book).stem
            save_path = base_name.with_suffix('.quotes.pdf')
            save_to_pdf(quotes, save_path)
            try:
                await message.reply(f"–§–∞–π–ª \"{save_path.name}\" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
                document = FSInputFile(save_path)
                await bot.send_document(message.chat.id, document)
            except TelegramForbiddenError:
                logger.warning(f"Bot –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {message.from_user.id}")

        elif current_state == BookStates.WAITING_FOR_COMPANY_DESCRIPTION.state:
            try:
                await message.reply("–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
            except TelegramForbiddenError:
                logger.warning(f"Bot –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {message.from_user.id}")

            recommendations = extract_recommendations(full_file_path, openai_api_key, company_name, company_description)
            base_name = UPLOAD_DIR / Path(selected_book).stem
            save_path = base_name.with_suffix('.recommendations.pdf')
            save_to_pdf(recommendations, save_path)
            try:
                await message.reply(f"–§–∞–π–ª \"{save_path.name}\" —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
                document = FSInputFile(save_path)
                await bot.send_document(message.chat.id, document)
            except TelegramForbiddenError:
                logger.warning(f"Bot –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {message.from_user.id}")

    except Exception as e:
        try:
            await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        except TelegramForbiddenError:
            logger.warning(f"Bot –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {message.from_user.id}")
    finally:
        await state.clear()

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /quotes
@user_private_router.message(or_f(Command("quotes"), (F.text.lower() == '–ø–æ–ª—É—á–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã')))
async def cmd_quotes(message: types.Message, state: FSMContext):
    books = get_books_list()
    if not books:
        try:
            await message.answer("–í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–∏—Ç–∞—Ç.")
        except TelegramForbiddenError:
            logger.warning(f"Bot was blocked by the user: {message.from_user.id}")
        return

    text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ü–∏—Ç–∞—Ç:\n"
    for i, book in enumerate(books, start=1):
        text += f"{i}. {book}\n"

    await state.set_state(BookStates.WAITING_FOR_QUOTES)
    try:
        await message.answer(text)
    except TelegramForbiddenError:
        logger.warning(f"Bot was blocked by the user: {message.from_user.id}")

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /recommendations
@user_private_router.message(or_f(Command("recommendations"), (F.text.lower() == '–ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')))
async def cmd_recommendations(message: types.Message, state: FSMContext):
    books = get_books_list()
    if not books:
        try:
            await message.answer("–í –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")
        except TelegramForbiddenError:
            logger.warning(f"Bot was blocked by the user: {message.from_user.id}")
        return

    text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π:\n"
    for i, book in enumerate(books, start=1):
        text += f"{i}. {book}\n"

    await state.set_state(BookStates.WAITING_FOR_RECOMMENDATION)
    try:
        await message.answer(text)
    except TelegramForbiddenError:
        logger.warning(f"Bot was blocked by the user: {message.from_user.id}")

@user_private_router.message(BookStates.WAITING_FOR_RECOMMENDATION)
async def ask_company_name(message: types.Message, state: FSMContext):
    books = get_books_list()
    try:
        book_index = int(message.text) - 1
        if 0 <= book_index < len(books):
            selected_book = books[book_index]
            await state.update_data(selected_book=selected_book, recommendation_type="general")
            await state.set_state(BookStates.WAITING_FOR_COMPANY_NAME)
            try:
                await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏.")
            except TelegramForbiddenError:
                logger.warning(f"Bot –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {message.from_user.id}")
        else:
            try:
                await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä.")
            except TelegramForbiddenError:
                logger.warning(f"Bot –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {message.from_user.id}")
    except ValueError:
        try:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–Ω–∏–≥–∏.")
        except TelegramForbiddenError:
            logger.warning(f"Bot –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {message.from_user.id}")

@user_private_router.message(BookStates.WAITING_FOR_COMPANY_NAME)
async def capture_company_name(message: types.Message, state: FSMContext):
    await state.update_data(company_name=message.text)
    await state.set_state(BookStates.WAITING_FOR_COMPANY_DESCRIPTION)
    try:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–¥–æ 300 —Å–∏–º–≤–æ–ª–æ–≤).")
    except TelegramForbiddenError:
        logger.warning(f"Bot –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {message.from_user.id}")

@user_private_router.message(BookStates.WAITING_FOR_COMPANY_DESCRIPTION)
async def capture_company_description(message: types.Message, state: FSMContext):
    await state.update_data(company_description=message.text)
    await handle_amount(message, state)

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help
@user_private_router.message(or_f(Command("help"), (F.text.lower() == '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞')))
async def cmd_help(message: types.Message):
    help_message = (
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–µ –∏–ª–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É –≥–æ—Ä—è—á–µ–π –ª–∏–Ω–∏–∏:\n"
        "1. –ü–æ—á—Ç–∞ - support@example.com\n"
        "2. –¢–µ–ª–µ—Ñ–æ–Ω –≥–æ—Ä—è—á–µ–π –ª–∏–Ω–∏–∏ - 8-880-000-00-00"
    )
    try:
        await message.answer(help_message)
    except TelegramForbiddenError:
        logger.warning(f"Bot was blocked by the user: {message.from_user.id}")

# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /end
@user_private_router.message(or_f(Command("end"), (F.text.lower() == '–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã')))
async def cmd_end(message: types.Message):
    end_message = (
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —á–∞—Ç-–±–æ—Ç–∞!\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –Ω–∞ –ø–æ—á—Ç—É –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞ –≥–æ—Ä—è—á—É—é –ª–∏–Ω–∏—é.\n"
        "–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!"
    )
    try:
        await message.answer(end_message, reply_markup=reply.del_kbd)
    except TelegramForbiddenError:
        logger.warning(f"Bot was blocked by the user: {message.from_user.id}")
